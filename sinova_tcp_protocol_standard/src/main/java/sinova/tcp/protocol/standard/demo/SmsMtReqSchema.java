// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package sinova.tcp.protocol.standard.demo;

import io.protostuff.Input;
import io.protostuff.Output;
import io.protostuff.Schema;

import java.io.IOException;

import javax.annotation.Generated;

@Generated("java_bean_model")
public class SmsMtReqSchema
       implements Schema<SmsMtReq> {


    static final SmsMtReq DEFAULT_INSTANCE = new SmsMtReq();
    static final Schema<SmsMtReq> SCHEMA = new SmsMtReqSchema();

    public static SmsMtReq getDefaultInstance() { return DEFAULT_INSTANCE; }
    public static Schema<SmsMtReq> getSchema() { return SCHEMA; }

    public static final int FIELD_NONE = 0;
    public static final int FIELD_RESEND_INFO = 1;
    public static final int FIELD_CLIENT_MT_SEQUENCE = 2;
	public static final int FIELD_MOBILE_NUM = 3;
	public static final int FIELD_SMS_CONTENT = 4;
    public static final int FIELD_PRIORITY = 5;

    public SmsMtReqSchema() {}


    public SmsMtReq newMessage() {
        return new SmsMtReq();
    }

    public Class<SmsMtReq> typeClass() {
        return SmsMtReq.class;
    }

    public String messageName() {
        return SmsMtReq.class.getSimpleName();
    }

    public String messageFullName() {
        return SmsMtReq.class.getName();
    }


    public boolean isInitialized(SmsMtReq message) {
        return true;
    }


    public void mergeFrom(Input input, SmsMtReq message) throws IOException {
        for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
            mergeFrom(input, message, fieldIx);
        }
    }

    public void mergeFrom(Input input, SmsMtReq message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                return;
            case FIELD_RESEND_INFO:
                message.resendInfo = input.mergeObject(message.resendInfo, ResendInfoSchema.getSchema());
                break;

            case FIELD_CLIENT_MT_SEQUENCE:
                message.clientMtSequence = input.readInt64();
                break;
            case FIELD_MOBILE_NUM:
                message.mobileNum = input.readString();
                break;
            case FIELD_SMS_CONTENT:
                message.smsContent = input.readString();
                break;
            case FIELD_PRIORITY:
                message.priority = input.readInt32();
                break;
            default:
                input.handleUnknownField(fieldIx, this);
        }
    }


    private static int[] FIELDS_TO_WRITE = { FIELD_RESEND_INFO, FIELD_CLIENT_MT_SEQUENCE, FIELD_MOBILE_NUM, FIELD_SMS_CONTENT, FIELD_PRIORITY };

    public int[] getWriteFields() { return FIELDS_TO_WRITE; }

    public void writeTo(Output output, SmsMtReq message) throws IOException {
        int[] toWrite = getWriteFields();
        for (int i = 0; i < toWrite.length; i++) {
            writeTo(output, message, toWrite[i]);
        }
    }

    public void writeTo(Output output, SmsMtReq message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                break;
            case FIELD_RESEND_INFO:
                if (message.getResendInfo() != null)
                    output.writeObject(FIELD_RESEND_INFO, message.resendInfo, ResendInfoSchema.getSchema(), false);

                break;
            case FIELD_CLIENT_MT_SEQUENCE:
                output.writeInt64(FIELD_CLIENT_MT_SEQUENCE, message.clientMtSequence, false);
                break;
            case FIELD_MOBILE_NUM:
                output.writeString(FIELD_MOBILE_NUM, message.mobileNum, false);
                break;
            case FIELD_SMS_CONTENT:
                output.writeString(FIELD_SMS_CONTENT, message.smsContent, false);
                break;
            case FIELD_PRIORITY:
                output.writeInt32(FIELD_PRIORITY, message.priority, false);
                break;
            default:
                break;
        }
    }

    public String getFieldName(int number) {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name) {
        return Integer.parseInt(name);
    }
}
