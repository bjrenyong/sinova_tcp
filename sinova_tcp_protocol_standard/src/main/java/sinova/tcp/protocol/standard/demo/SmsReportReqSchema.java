// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package sinova.tcp.protocol.standard.demo;

import io.protostuff.Input;
import io.protostuff.Output;
import io.protostuff.Schema;

import java.io.IOException;

import javax.annotation.Generated;

@Generated("java_bean_model")
public class SmsReportReqSchema implements Schema<SmsReportReq> {

	static final SmsReportReq DEFAULT_INSTANCE = new SmsReportReq();
	static final Schema<SmsReportReq> SCHEMA = new SmsReportReqSchema();

	public static SmsReportReq getDefaultInstance() {
		return DEFAULT_INSTANCE;
	}

	public static Schema<SmsReportReq> getSchema() {
		return SCHEMA;
	}

	public static final int FIELD_NONE = 0;
	public static final int FIELD_RESEND_INFO = 1;
	public static final int FIELD_USER_ID = 2;
	public static final int FIELD_CLIENT_MT_SEQUENCE = 3;
	public static final int FIELD_SYS_MT_SEQUENCE = 4;
	public static final int FIELD_REPORT_CODE = 5;

	public SmsReportReqSchema() {
	}

	public SmsReportReq newMessage() {
		return new SmsReportReq();
	}

	public Class<SmsReportReq> typeClass() {
		return SmsReportReq.class;
	}

	public String messageName() {
		return SmsReportReq.class.getSimpleName();
	}

	public String messageFullName() {
		return SmsReportReq.class.getName();
	}

	public boolean isInitialized(SmsReportReq message) {
		return true;
	}

	public void mergeFrom(Input input, SmsReportReq message) throws IOException {
		for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
			mergeFrom(input, message, fieldIx);
		}
	}

	public void mergeFrom(Input input, SmsReportReq message, int fieldIx) throws IOException {
		switch (fieldIx) {
		case FIELD_NONE:
			return;
		case FIELD_RESEND_INFO:
			message.resendInfo = input.mergeObject(message.resendInfo, ResendInfoSchema.getSchema());
			break;

		case FIELD_USER_ID:
			message.userId = input.readInt32();
			break;
		case FIELD_CLIENT_MT_SEQUENCE:
			message.clientMtSequence = input.readInt64();
			break;
		case FIELD_SYS_MT_SEQUENCE:
			message.sysMtSequence = input.readInt64();
			break;
		case FIELD_REPORT_CODE:
			message.reportCode = input.readString();
			break;
		default:
			input.handleUnknownField(fieldIx, this);
		}
	}

	private static int[] FIELDS_TO_WRITE = { FIELD_RESEND_INFO, FIELD_USER_ID, FIELD_CLIENT_MT_SEQUENCE,
			FIELD_SYS_MT_SEQUENCE, FIELD_REPORT_CODE };

	public int[] getWriteFields() {
		return FIELDS_TO_WRITE;
	}

	public void writeTo(Output output, SmsReportReq message) throws IOException {
		int[] toWrite = getWriteFields();
		for (int i = 0; i < toWrite.length; i++) {
			writeTo(output, message, toWrite[i]);
		}
	}

	public void writeTo(Output output, SmsReportReq message, int fieldIx) throws IOException {
		switch (fieldIx) {
		case FIELD_NONE:
			break;
		case FIELD_RESEND_INFO:
			if (message.getResendInfo() != null)
				output.writeObject(FIELD_RESEND_INFO, message.resendInfo, ResendInfoSchema.getSchema(), false);

			break;
		case FIELD_USER_ID:
			output.writeInt32(FIELD_USER_ID, message.userId, false);
			break;
		case FIELD_CLIENT_MT_SEQUENCE:
			output.writeInt64(FIELD_CLIENT_MT_SEQUENCE, message.clientMtSequence, false);
			break;
		case FIELD_SYS_MT_SEQUENCE:
			output.writeInt64(FIELD_SYS_MT_SEQUENCE, message.sysMtSequence, false);
			break;
		case FIELD_REPORT_CODE:
			output.writeString(FIELD_REPORT_CODE, message.reportCode, false);
			break;
		default:
			break;
		}
	}

	public String getFieldName(int number) {
		return Integer.toString(number);
	}

	public int getFieldNumber(String name) {
		return Integer.parseInt(name);
	}
}
