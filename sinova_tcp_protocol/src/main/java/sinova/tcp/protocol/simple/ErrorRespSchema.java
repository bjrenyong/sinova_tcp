// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package sinova.tcp.protocol.simple;

import io.protostuff.Input;
import io.protostuff.Output;
import io.protostuff.Schema;

import java.io.IOException;

import javax.annotation.Generated;

@Generated("java_bean_model")
public class ErrorRespSchema implements Schema<ErrorResp> {

	static final ErrorResp DEFAULT_INSTANCE = new ErrorResp();
	static final Schema<ErrorResp> SCHEMA = new ErrorRespSchema();

	public static ErrorResp getDefaultInstance() {
		return DEFAULT_INSTANCE;
	}

	public static Schema<ErrorResp> getSchema() {
		return SCHEMA;
	}

	public static final int FIELD_NONE = 0;
	public static final int FIELD_ERROR_CODE = 1;
	public static final int FIELD_ERROR_MSG = 2;

	public ErrorRespSchema() {
	}

	public ErrorResp newMessage() {
		return new ErrorResp();
	}

	public Class<ErrorResp> typeClass() {
		return ErrorResp.class;
	}

	public String messageName() {
		return ErrorResp.class.getSimpleName();
	}

	public String messageFullName() {
		return ErrorResp.class.getName();
	}

	public boolean isInitialized(ErrorResp message) {
		return true;
	}

	public void mergeFrom(Input input, ErrorResp message) throws IOException {
		for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
			mergeFrom(input, message, fieldIx);
		}
	}

	public void mergeFrom(Input input, ErrorResp message, int fieldIx) throws IOException {
		switch (fieldIx) {
		case FIELD_NONE:
			return;
		case FIELD_ERROR_CODE:
			message.errorCode = input.readString();
			break;
		case FIELD_ERROR_MSG:
			message.errorMsg = input.readString();
			break;
		default:
			input.handleUnknownField(fieldIx, this);
		}
	}

	private static int[] FIELDS_TO_WRITE = { FIELD_ERROR_CODE, FIELD_ERROR_MSG };

	public int[] getWriteFields() {
		return FIELDS_TO_WRITE;
	}

	public void writeTo(Output output, ErrorResp message) throws IOException {
		int[] toWrite = getWriteFields();
		for (int i = 0; i < toWrite.length; i++) {
			writeTo(output, message, toWrite[i]);
		}
	}

	public void writeTo(Output output, ErrorResp message, int fieldIx) throws IOException {
		switch (fieldIx) {
		case FIELD_NONE:
			break;
		case FIELD_ERROR_CODE:
			output.writeString(FIELD_ERROR_CODE, message.errorCode, false);
			break;
		case FIELD_ERROR_MSG:
			output.writeString(FIELD_ERROR_MSG, message.errorMsg, false);
			break;
		default:
			break;
		}
	}

	public String getFieldName(int number) {
		return Integer.toString(number);
	}

	public int getFieldNumber(String name) {
		return Integer.parseInt(name);
	}
}
