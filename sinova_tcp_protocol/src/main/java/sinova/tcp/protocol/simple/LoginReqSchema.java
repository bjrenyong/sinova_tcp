// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from proto

package sinova.tcp.protocol.simple;

import io.protostuff.Input;
import io.protostuff.Output;
import io.protostuff.Schema;

import java.io.IOException;

import javax.annotation.Generated;

@Generated("java_bean_model")
public class LoginReqSchema implements Schema<LoginReq> {

	static final LoginReq DEFAULT_INSTANCE = new LoginReq();
	static final Schema<LoginReq> SCHEMA = new LoginReqSchema();

	public static LoginReq getDefaultInstance() {
		return DEFAULT_INSTANCE;
	}

	public static Schema<LoginReq> getSchema() {
		return SCHEMA;
	}

	public static final int FIELD_NONE = 0;
	public static final int FIELD_USER_ID = 1;
	public static final int FIELD_APP_NAME = 2;
	public static final int FIELD_AUTH_ORIGIN = 3;
	public static final int FIELD_TIMESTAMP = 4;

	public LoginReqSchema() {
	}

	public LoginReq newMessage() {
		return new LoginReq();
	}

	public Class<LoginReq> typeClass() {
		return LoginReq.class;
	}

	public String messageName() {
		return LoginReq.class.getSimpleName();
	}

	public String messageFullName() {
		return LoginReq.class.getName();
	}

	public boolean isInitialized(LoginReq message) {
		return true;
	}

	public void mergeFrom(Input input, LoginReq message) throws IOException {
		for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
			mergeFrom(input, message, fieldIx);
		}
	}

	public void mergeFrom(Input input, LoginReq message, int fieldIx) throws IOException {
		switch (fieldIx) {
		case FIELD_NONE:
			return;
		case FIELD_USER_ID:
			message.userId = input.readInt32();
			break;
		case FIELD_APP_NAME:
			message.appName = input.readString();
			break;
		case FIELD_AUTH_ORIGIN:
			message.authOrigin = input.readString();
			break;
		case FIELD_TIMESTAMP:
			message.timestamp = input.readInt64();
			break;
		default:
			input.handleUnknownField(fieldIx, this);
		}
	}

	private static int[] FIELDS_TO_WRITE = { FIELD_USER_ID, FIELD_APP_NAME, FIELD_AUTH_ORIGIN, FIELD_TIMESTAMP };

	public int[] getWriteFields() {
		return FIELDS_TO_WRITE;
	}

	public void writeTo(Output output, LoginReq message) throws IOException {
		int[] toWrite = getWriteFields();
		for (int i = 0; i < toWrite.length; i++) {
			writeTo(output, message, toWrite[i]);
		}
	}

	public void writeTo(Output output, LoginReq message, int fieldIx) throws IOException {
		switch (fieldIx) {
		case FIELD_NONE:
			break;
		case FIELD_USER_ID:
			output.writeInt32(FIELD_USER_ID, message.userId, false);
			break;
		case FIELD_APP_NAME:
			output.writeString(FIELD_APP_NAME, message.appName, false);
			break;
		case FIELD_AUTH_ORIGIN:
			output.writeString(FIELD_AUTH_ORIGIN, message.authOrigin, false);
			break;
		case FIELD_TIMESTAMP:
			output.writeInt64(FIELD_TIMESTAMP, message.timestamp, false);
			break;
		default:
			break;
		}
	}

	public String getFieldName(int number) {
		return Integer.toString(number);
	}

	public int getFieldNumber(String name) {
		return Integer.parseInt(name);
	}
}
